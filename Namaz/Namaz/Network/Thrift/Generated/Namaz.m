/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "Namaz.h"

@implementation NamazThriftThriftException

- (id) init
{
  return [super initWithName: @"ThriftException" reason: @"unknown" userInfo: nil];
}

- (id) initWithDisplayMessage: (NSString *) displayMessage logMessage: (NSString *) logMessage url: (NSString *) url
{
  self = [self init];
  __displayMessage = [displayMessage retain_stub];
  __displayMessage_isset = YES;
  __logMessage = [logMessage retain_stub];
  __logMessage_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"displayMessage"])
  {
    __displayMessage = [[decoder decodeObjectForKey: @"displayMessage"] retain_stub];
    __displayMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"logMessage"])
  {
    __logMessage = [[decoder decodeObjectForKey: @"logMessage"] retain_stub];
    __logMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__displayMessage_isset)
  {
    [encoder encodeObject: __displayMessage forKey: @"displayMessage"];
  }
  if (__logMessage_isset)
  {
    [encoder encodeObject: __logMessage forKey: @"logMessage"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
}

- (void) dealloc
{
  [__displayMessage release_stub];
  [__logMessage release_stub];
  [__url release_stub];
  [super dealloc_stub];
}

- (NSString *) displayMessage {
  return [[__displayMessage retain_stub] autorelease_stub];
}

- (void) setDisplayMessage: (NSString *) displayMessage {
  [displayMessage retain_stub];
  [__displayMessage release_stub];
  __displayMessage = displayMessage;
  __displayMessage_isset = YES;
}

- (BOOL) displayMessageIsSet {
  return __displayMessage_isset;
}

- (void) unsetDisplayMessage {
  [__displayMessage release_stub];
  __displayMessage = nil;
  __displayMessage_isset = NO;
}

- (NSString *) logMessage {
  return [[__logMessage retain_stub] autorelease_stub];
}

- (void) setLogMessage: (NSString *) logMessage {
  [logMessage retain_stub];
  [__logMessage release_stub];
  __logMessage = logMessage;
  __logMessage_isset = YES;
}

- (BOOL) logMessageIsSet {
  return __logMessage_isset;
}

- (void) unsetLogMessage {
  [__logMessage release_stub];
  __logMessage = nil;
  __logMessage_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisplayMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLogMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftException"];
  if (__displayMessage_isset) {
    if (__displayMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"displayMessage" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __displayMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__logMessage_isset) {
    if (__logMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"logMessage" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __logMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftException("];
  [ms appendString: @"displayMessage:"];
  [ms appendFormat: @"\"%@\"", __displayMessage];
  [ms appendString: @",logMessage:"];
  [ms appendFormat: @"\"%@\"", __logMessage];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NamazThriftThriftRequestBase

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithProtocolVersion: (NSString *) protocolVersion deviceId: (NSString *) deviceId userLogin: (NSString *) userLogin authToken: (NSString *) authToken clientPlatform: (int) clientPlatform pushToken: (NSString *) pushToken currentLanguage: (NSString *) currentLanguage clientVersion: (NSString *) clientVersion
{
  self = [super init];
  __protocolVersion = [protocolVersion retain_stub];
  __protocolVersion_isset = YES;
  __deviceId = [deviceId retain_stub];
  __deviceId_isset = YES;
  __userLogin = [userLogin retain_stub];
  __userLogin_isset = YES;
  __authToken = [authToken retain_stub];
  __authToken_isset = YES;
  __clientPlatform = clientPlatform;
  __clientPlatform_isset = YES;
  __pushToken = [pushToken retain_stub];
  __pushToken_isset = YES;
  __currentLanguage = [currentLanguage retain_stub];
  __currentLanguage_isset = YES;
  __clientVersion = [clientVersion retain_stub];
  __clientVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"protocolVersion"])
  {
    __protocolVersion = [[decoder decodeObjectForKey: @"protocolVersion"] retain_stub];
    __protocolVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain_stub];
    __deviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userLogin"])
  {
    __userLogin = [[decoder decodeObjectForKey: @"userLogin"] retain_stub];
    __userLogin_isset = YES;
  }
  if ([decoder containsValueForKey: @"authToken"])
  {
    __authToken = [[decoder decodeObjectForKey: @"authToken"] retain_stub];
    __authToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientPlatform"])
  {
    __clientPlatform = [decoder decodeIntForKey: @"clientPlatform"];
    __clientPlatform_isset = YES;
  }
  if ([decoder containsValueForKey: @"pushToken"])
  {
    __pushToken = [[decoder decodeObjectForKey: @"pushToken"] retain_stub];
    __pushToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentLanguage"])
  {
    __currentLanguage = [[decoder decodeObjectForKey: @"currentLanguage"] retain_stub];
    __currentLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientVersion"])
  {
    __clientVersion = [[decoder decodeObjectForKey: @"clientVersion"] retain_stub];
    __clientVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__protocolVersion_isset)
  {
    [encoder encodeObject: __protocolVersion forKey: @"protocolVersion"];
  }
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
  if (__userLogin_isset)
  {
    [encoder encodeObject: __userLogin forKey: @"userLogin"];
  }
  if (__authToken_isset)
  {
    [encoder encodeObject: __authToken forKey: @"authToken"];
  }
  if (__clientPlatform_isset)
  {
    [encoder encodeInt: __clientPlatform forKey: @"clientPlatform"];
  }
  if (__pushToken_isset)
  {
    [encoder encodeObject: __pushToken forKey: @"pushToken"];
  }
  if (__currentLanguage_isset)
  {
    [encoder encodeObject: __currentLanguage forKey: @"currentLanguage"];
  }
  if (__clientVersion_isset)
  {
    [encoder encodeObject: __clientVersion forKey: @"clientVersion"];
  }
}

- (void) dealloc
{
  [__protocolVersion release_stub];
  [__deviceId release_stub];
  [__userLogin release_stub];
  [__authToken release_stub];
  [__pushToken release_stub];
  [__currentLanguage release_stub];
  [__clientVersion release_stub];
  [super dealloc_stub];
}

- (NSString *) protocolVersion {
  return [[__protocolVersion retain_stub] autorelease_stub];
}

- (void) setProtocolVersion: (NSString *) protocolVersion {
  [protocolVersion retain_stub];
  [__protocolVersion release_stub];
  __protocolVersion = protocolVersion;
  __protocolVersion_isset = YES;
}

- (BOOL) protocolVersionIsSet {
  return __protocolVersion_isset;
}

- (void) unsetProtocolVersion {
  [__protocolVersion release_stub];
  __protocolVersion = nil;
  __protocolVersion_isset = NO;
}

- (NSString *) deviceId {
  return [[__deviceId retain_stub] autorelease_stub];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain_stub];
  [__deviceId release_stub];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release_stub];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (NSString *) userLogin {
  return [[__userLogin retain_stub] autorelease_stub];
}

- (void) setUserLogin: (NSString *) userLogin {
  [userLogin retain_stub];
  [__userLogin release_stub];
  __userLogin = userLogin;
  __userLogin_isset = YES;
}

- (BOOL) userLoginIsSet {
  return __userLogin_isset;
}

- (void) unsetUserLogin {
  [__userLogin release_stub];
  __userLogin = nil;
  __userLogin_isset = NO;
}

- (NSString *) authToken {
  return [[__authToken retain_stub] autorelease_stub];
}

- (void) setAuthToken: (NSString *) authToken {
  [authToken retain_stub];
  [__authToken release_stub];
  __authToken = authToken;
  __authToken_isset = YES;
}

- (BOOL) authTokenIsSet {
  return __authToken_isset;
}

- (void) unsetAuthToken {
  [__authToken release_stub];
  __authToken = nil;
  __authToken_isset = NO;
}

- (int) clientPlatform {
  return __clientPlatform;
}

- (void) setClientPlatform: (int) clientPlatform {
  __clientPlatform = clientPlatform;
  __clientPlatform_isset = YES;
}

- (BOOL) clientPlatformIsSet {
  return __clientPlatform_isset;
}

- (void) unsetClientPlatform {
  __clientPlatform_isset = NO;
}

- (NSString *) pushToken {
  return [[__pushToken retain_stub] autorelease_stub];
}

- (void) setPushToken: (NSString *) pushToken {
  [pushToken retain_stub];
  [__pushToken release_stub];
  __pushToken = pushToken;
  __pushToken_isset = YES;
}

- (BOOL) pushTokenIsSet {
  return __pushToken_isset;
}

- (void) unsetPushToken {
  [__pushToken release_stub];
  __pushToken = nil;
  __pushToken_isset = NO;
}

- (NSString *) currentLanguage {
  return [[__currentLanguage retain_stub] autorelease_stub];
}

- (void) setCurrentLanguage: (NSString *) currentLanguage {
  [currentLanguage retain_stub];
  [__currentLanguage release_stub];
  __currentLanguage = currentLanguage;
  __currentLanguage_isset = YES;
}

- (BOOL) currentLanguageIsSet {
  return __currentLanguage_isset;
}

- (void) unsetCurrentLanguage {
  [__currentLanguage release_stub];
  __currentLanguage = nil;
  __currentLanguage_isset = NO;
}

- (NSString *) clientVersion {
  return [[__clientVersion retain_stub] autorelease_stub];
}

- (void) setClientVersion: (NSString *) clientVersion {
  [clientVersion retain_stub];
  [__clientVersion release_stub];
  __clientVersion = clientVersion;
  __clientVersion_isset = YES;
}

- (BOOL) clientVersionIsSet {
  return __clientVersion_isset;
}

- (void) unsetClientVersion {
  [__clientVersion release_stub];
  __clientVersion = nil;
  __clientVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProtocolVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserLogin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setClientPlatform: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPushToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCurrentLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClientVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftRequestBase"];
  if (__protocolVersion_isset) {
    if (__protocolVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"protocolVersion" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __protocolVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userLogin_isset) {
    if (__userLogin != nil) {
      [outProtocol writeFieldBeginWithName: @"userLogin" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userLogin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authToken_isset) {
    if (__authToken != nil) {
      [outProtocol writeFieldBeginWithName: @"authToken" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __authToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientPlatform_isset) {
    [outProtocol writeFieldBeginWithName: @"clientPlatform" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __clientPlatform];
    [outProtocol writeFieldEnd];
  }
  if (__pushToken_isset) {
    if (__pushToken != nil) {
      [outProtocol writeFieldBeginWithName: @"pushToken" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __pushToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__currentLanguage_isset) {
    if (__currentLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"currentLanguage" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __currentLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientVersion_isset) {
    if (__clientVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"clientVersion" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __clientVersion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftRequestBase("];
  [ms appendString: @"protocolVersion:"];
  [ms appendFormat: @"\"%@\"", __protocolVersion];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @",userLogin:"];
  [ms appendFormat: @"\"%@\"", __userLogin];
  [ms appendString: @",authToken:"];
  [ms appendFormat: @"\"%@\"", __authToken];
  [ms appendString: @",clientPlatform:"];
  [ms appendFormat: @"%i", __clientPlatform];
  [ms appendString: @",pushToken:"];
  [ms appendFormat: @"\"%@\"", __pushToken];
  [ms appendString: @",currentLanguage:"];
  [ms appendFormat: @"\"%@\"", __currentLanguage];
  [ms appendString: @",clientVersion:"];
  [ms appendFormat: @"\"%@\"", __clientVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NamazThriftThriftPingResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServerTimestamp: (int64_t) serverTimestamp shouldShowMessage: (BOOL) shouldShowMessage updateUrl: (NSString *) updateUrl updateMessage: (NSString *) updateMessage
{
  self = [super init];
  __serverTimestamp = serverTimestamp;
  __serverTimestamp_isset = YES;
  __shouldShowMessage = shouldShowMessage;
  __shouldShowMessage_isset = YES;
  __updateUrl = [updateUrl retain_stub];
  __updateUrl_isset = YES;
  __updateMessage = [updateMessage retain_stub];
  __updateMessage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serverTimestamp"])
  {
    __serverTimestamp = [decoder decodeInt64ForKey: @"serverTimestamp"];
    __serverTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"shouldShowMessage"])
  {
    __shouldShowMessage = [decoder decodeBoolForKey: @"shouldShowMessage"];
    __shouldShowMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateUrl"])
  {
    __updateUrl = [[decoder decodeObjectForKey: @"updateUrl"] retain_stub];
    __updateUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateMessage"])
  {
    __updateMessage = [[decoder decodeObjectForKey: @"updateMessage"] retain_stub];
    __updateMessage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serverTimestamp_isset)
  {
    [encoder encodeInt64: __serverTimestamp forKey: @"serverTimestamp"];
  }
  if (__shouldShowMessage_isset)
  {
    [encoder encodeBool: __shouldShowMessage forKey: @"shouldShowMessage"];
  }
  if (__updateUrl_isset)
  {
    [encoder encodeObject: __updateUrl forKey: @"updateUrl"];
  }
  if (__updateMessage_isset)
  {
    [encoder encodeObject: __updateMessage forKey: @"updateMessage"];
  }
}

- (void) dealloc
{
  [__updateUrl release_stub];
  [__updateMessage release_stub];
  [super dealloc_stub];
}

- (int64_t) serverTimestamp {
  return __serverTimestamp;
}

- (void) setServerTimestamp: (int64_t) serverTimestamp {
  __serverTimestamp = serverTimestamp;
  __serverTimestamp_isset = YES;
}

- (BOOL) serverTimestampIsSet {
  return __serverTimestamp_isset;
}

- (void) unsetServerTimestamp {
  __serverTimestamp_isset = NO;
}

- (BOOL) shouldShowMessage {
  return __shouldShowMessage;
}

- (void) setShouldShowMessage: (BOOL) shouldShowMessage {
  __shouldShowMessage = shouldShowMessage;
  __shouldShowMessage_isset = YES;
}

- (BOOL) shouldShowMessageIsSet {
  return __shouldShowMessage_isset;
}

- (void) unsetShouldShowMessage {
  __shouldShowMessage_isset = NO;
}

- (NSString *) updateUrl {
  return [[__updateUrl retain_stub] autorelease_stub];
}

- (void) setUpdateUrl: (NSString *) updateUrl {
  [updateUrl retain_stub];
  [__updateUrl release_stub];
  __updateUrl = updateUrl;
  __updateUrl_isset = YES;
}

- (BOOL) updateUrlIsSet {
  return __updateUrl_isset;
}

- (void) unsetUpdateUrl {
  [__updateUrl release_stub];
  __updateUrl = nil;
  __updateUrl_isset = NO;
}

- (NSString *) updateMessage {
  return [[__updateMessage retain_stub] autorelease_stub];
}

- (void) setUpdateMessage: (NSString *) updateMessage {
  [updateMessage retain_stub];
  [__updateMessage release_stub];
  __updateMessage = updateMessage;
  __updateMessage_isset = YES;
}

- (BOOL) updateMessageIsSet {
  return __updateMessage_isset;
}

- (void) unsetUpdateMessage {
  [__updateMessage release_stub];
  __updateMessage = nil;
  __updateMessage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServerTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setShouldShowMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUpdateUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUpdateMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftPingResponse"];
  if (__serverTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"serverTimestamp" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __serverTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__shouldShowMessage_isset) {
    [outProtocol writeFieldBeginWithName: @"shouldShowMessage" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __shouldShowMessage];
    [outProtocol writeFieldEnd];
  }
  if (__updateUrl_isset) {
    if (__updateUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"updateUrl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __updateUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updateMessage_isset) {
    if (__updateMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"updateMessage" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __updateMessage];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftPingResponse("];
  [ms appendString: @"serverTimestamp:"];
  [ms appendFormat: @"%qi", __serverTimestamp];
  [ms appendString: @",shouldShowMessage:"];
  [ms appendFormat: @"%i", __shouldShowMessage];
  [ms appendString: @",updateUrl:"];
  [ms appendFormat: @"\"%@\"", __updateUrl];
  [ms appendString: @",updateMessage:"];
  [ms appendFormat: @"\"%@\"", __updateMessage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NamazThriftThriftCity

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id name: (NSString *) name
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftCity"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftCity("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NamazThriftThriftSchedule

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id date: (NSString *) date event: (int) event
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __date = [date retain_stub];
  __date_isset = YES;
  __event = event;
  __event_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [[decoder decodeObjectForKey: @"date"] retain_stub];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"event"])
  {
    __event = [decoder decodeIntForKey: @"event"];
    __event_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__date_isset)
  {
    [encoder encodeObject: __date forKey: @"date"];
  }
  if (__event_isset)
  {
    [encoder encodeInt: __event forKey: @"event"];
  }
}

- (void) dealloc
{
  [__date release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) date {
  return [[__date retain_stub] autorelease_stub];
}

- (void) setDate: (NSString *) date {
  [date retain_stub];
  [__date release_stub];
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  [__date release_stub];
  __date = nil;
  __date_isset = NO;
}

- (int) event {
  return __event;
}

- (void) setEvent: (int) event {
  __event = event;
  __event_isset = YES;
}

- (BOOL) eventIsSet {
  return __event_isset;
}

- (void) unsetEvent {
  __event_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setEvent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftSchedule"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__date_isset) {
    if (__date != nil) {
      [outProtocol writeFieldBeginWithName: @"date" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __date];
      [outProtocol writeFieldEnd];
    }
  }
  if (__event_isset) {
    [outProtocol writeFieldBeginWithName: @"event" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __event];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftSchedule("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",date:"];
  [ms appendFormat: @"\"%@\"", __date];
  [ms appendString: @",event:"];
  [ms appendFormat: @"%i", __event];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NamazThriftThriftNews

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id title: (NSString *) title date: (NSString *) date text: (NSString *) text pictureUrl: (NSString *) pictureUrl smallPictureUrl: (NSString *) smallPictureUrl important: (BOOL) important
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __date = [date retain_stub];
  __date_isset = YES;
  __text = [text retain_stub];
  __text_isset = YES;
  __pictureUrl = [pictureUrl retain_stub];
  __pictureUrl_isset = YES;
  __smallPictureUrl = [smallPictureUrl retain_stub];
  __smallPictureUrl_isset = YES;
  __important = important;
  __important_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [[decoder decodeObjectForKey: @"date"] retain_stub];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"text"])
  {
    __text = [[decoder decodeObjectForKey: @"text"] retain_stub];
    __text_isset = YES;
  }
  if ([decoder containsValueForKey: @"pictureUrl"])
  {
    __pictureUrl = [[decoder decodeObjectForKey: @"pictureUrl"] retain_stub];
    __pictureUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"smallPictureUrl"])
  {
    __smallPictureUrl = [[decoder decodeObjectForKey: @"smallPictureUrl"] retain_stub];
    __smallPictureUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"important"])
  {
    __important = [decoder decodeBoolForKey: @"important"];
    __important_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__date_isset)
  {
    [encoder encodeObject: __date forKey: @"date"];
  }
  if (__text_isset)
  {
    [encoder encodeObject: __text forKey: @"text"];
  }
  if (__pictureUrl_isset)
  {
    [encoder encodeObject: __pictureUrl forKey: @"pictureUrl"];
  }
  if (__smallPictureUrl_isset)
  {
    [encoder encodeObject: __smallPictureUrl forKey: @"smallPictureUrl"];
  }
  if (__important_isset)
  {
    [encoder encodeBool: __important forKey: @"important"];
  }
}

- (void) dealloc
{
  [__title release_stub];
  [__date release_stub];
  [__text release_stub];
  [__pictureUrl release_stub];
  [__smallPictureUrl release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) date {
  return [[__date retain_stub] autorelease_stub];
}

- (void) setDate: (NSString *) date {
  [date retain_stub];
  [__date release_stub];
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  [__date release_stub];
  __date = nil;
  __date_isset = NO;
}

- (NSString *) text {
  return [[__text retain_stub] autorelease_stub];
}

- (void) setText: (NSString *) text {
  [text retain_stub];
  [__text release_stub];
  __text = text;
  __text_isset = YES;
}

- (BOOL) textIsSet {
  return __text_isset;
}

- (void) unsetText {
  [__text release_stub];
  __text = nil;
  __text_isset = NO;
}

- (NSString *) pictureUrl {
  return [[__pictureUrl retain_stub] autorelease_stub];
}

- (void) setPictureUrl: (NSString *) pictureUrl {
  [pictureUrl retain_stub];
  [__pictureUrl release_stub];
  __pictureUrl = pictureUrl;
  __pictureUrl_isset = YES;
}

- (BOOL) pictureUrlIsSet {
  return __pictureUrl_isset;
}

- (void) unsetPictureUrl {
  [__pictureUrl release_stub];
  __pictureUrl = nil;
  __pictureUrl_isset = NO;
}

- (NSString *) smallPictureUrl {
  return [[__smallPictureUrl retain_stub] autorelease_stub];
}

- (void) setSmallPictureUrl: (NSString *) smallPictureUrl {
  [smallPictureUrl retain_stub];
  [__smallPictureUrl release_stub];
  __smallPictureUrl = smallPictureUrl;
  __smallPictureUrl_isset = YES;
}

- (BOOL) smallPictureUrlIsSet {
  return __smallPictureUrl_isset;
}

- (void) unsetSmallPictureUrl {
  [__smallPictureUrl release_stub];
  __smallPictureUrl = nil;
  __smallPictureUrl_isset = NO;
}

- (BOOL) important {
  return __important;
}

- (void) setImportant: (BOOL) important {
  __important = important;
  __important_isset = YES;
}

- (BOOL) importantIsSet {
  return __important_isset;
}

- (void) unsetImportant {
  __important_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPictureUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSmallPictureUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setImportant: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftNews"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    if (__date != nil) {
      [outProtocol writeFieldBeginWithName: @"date" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __date];
      [outProtocol writeFieldEnd];
    }
  }
  if (__text_isset) {
    if (__text != nil) {
      [outProtocol writeFieldBeginWithName: @"text" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __text];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pictureUrl_isset) {
    if (__pictureUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"pictureUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __pictureUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__smallPictureUrl_isset) {
    if (__smallPictureUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"smallPictureUrl" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __smallPictureUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__important_isset) {
    [outProtocol writeFieldBeginWithName: @"important" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __important];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftNews("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",date:"];
  [ms appendFormat: @"\"%@\"", __date];
  [ms appendString: @",text:"];
  [ms appendFormat: @"\"%@\"", __text];
  [ms appendString: @",pictureUrl:"];
  [ms appendFormat: @"\"%@\"", __pictureUrl];
  [ms appendString: @",smallPictureUrl:"];
  [ms appendFormat: @"\"%@\"", __smallPictureUrl];
  [ms appendString: @",important:"];
  [ms appendFormat: @"%i", __important];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NamazThriftThriftChangesRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommonBase: (NamazThriftThriftRequestBase *) commonBase lastUpdated: (int64_t) lastUpdated cityId: (int64_t) cityId
{
  self = [super init];
  __commonBase = [commonBase retain_stub];
  __commonBase_isset = YES;
  __lastUpdated = lastUpdated;
  __lastUpdated_isset = YES;
  __cityId = cityId;
  __cityId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commonBase"])
  {
    __commonBase = [[decoder decodeObjectForKey: @"commonBase"] retain_stub];
    __commonBase_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastUpdated"])
  {
    __lastUpdated = [decoder decodeInt64ForKey: @"lastUpdated"];
    __lastUpdated_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityId"])
  {
    __cityId = [decoder decodeInt64ForKey: @"cityId"];
    __cityId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commonBase_isset)
  {
    [encoder encodeObject: __commonBase forKey: @"commonBase"];
  }
  if (__lastUpdated_isset)
  {
    [encoder encodeInt64: __lastUpdated forKey: @"lastUpdated"];
  }
  if (__cityId_isset)
  {
    [encoder encodeInt64: __cityId forKey: @"cityId"];
  }
}

- (void) dealloc
{
  [__commonBase release_stub];
  [super dealloc_stub];
}

- (NamazThriftThriftRequestBase *) commonBase {
  return [[__commonBase retain_stub] autorelease_stub];
}

- (void) setCommonBase: (NamazThriftThriftRequestBase *) commonBase {
  [commonBase retain_stub];
  [__commonBase release_stub];
  __commonBase = commonBase;
  __commonBase_isset = YES;
}

- (BOOL) commonBaseIsSet {
  return __commonBase_isset;
}

- (void) unsetCommonBase {
  [__commonBase release_stub];
  __commonBase = nil;
  __commonBase_isset = NO;
}

- (int64_t) lastUpdated {
  return __lastUpdated;
}

- (void) setLastUpdated: (int64_t) lastUpdated {
  __lastUpdated = lastUpdated;
  __lastUpdated_isset = YES;
}

- (BOOL) lastUpdatedIsSet {
  return __lastUpdated_isset;
}

- (void) unsetLastUpdated {
  __lastUpdated_isset = NO;
}

- (int64_t) cityId {
  return __cityId;
}

- (void) setCityId: (int64_t) cityId {
  __cityId = cityId;
  __cityId_isset = YES;
}

- (BOOL) cityIdIsSet {
  return __cityId_isset;
}

- (void) unsetCityId {
  __cityId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NamazThriftThriftRequestBase *fieldValue = [[NamazThriftThriftRequestBase alloc] init];
          [fieldValue read: inProtocol];
          [self setCommonBase: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLastUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftChangesRequest"];
  if (__commonBase_isset) {
    if (__commonBase != nil) {
      [outProtocol writeFieldBeginWithName: @"commonBase" type: TType_STRUCT fieldID: 1];
      [__commonBase write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastUpdated_isset) {
    [outProtocol writeFieldBeginWithName: @"lastUpdated" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __lastUpdated];
    [outProtocol writeFieldEnd];
  }
  if (__cityId_isset) {
    [outProtocol writeFieldBeginWithName: @"cityId" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __cityId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftChangesRequest("];
  [ms appendString: @"commonBase:"];
  [ms appendFormat: @"%@", __commonBase];
  [ms appendString: @",lastUpdated:"];
  [ms appendFormat: @"%qi", __lastUpdated];
  [ms appendString: @",cityId:"];
  [ms appendFormat: @"%qi", __cityId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NamazThriftThriftChangesResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUpdatedCities: (NSMutableArray *) updatedCities updatedSchedule: (NSMutableArray *) updatedSchedule updatedNews: (NSMutableArray *) updatedNews deletedCityIds: (NSMutableArray *) deletedCityIds deletedScheduleIds: (NSMutableArray *) deletedScheduleIds deletedNewsIds: (NSMutableArray *) deletedNewsIds
{
  self = [super init];
  __updatedCities = [updatedCities retain_stub];
  __updatedCities_isset = YES;
  __updatedSchedule = [updatedSchedule retain_stub];
  __updatedSchedule_isset = YES;
  __updatedNews = [updatedNews retain_stub];
  __updatedNews_isset = YES;
  __deletedCityIds = [deletedCityIds retain_stub];
  __deletedCityIds_isset = YES;
  __deletedScheduleIds = [deletedScheduleIds retain_stub];
  __deletedScheduleIds_isset = YES;
  __deletedNewsIds = [deletedNewsIds retain_stub];
  __deletedNewsIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"updatedCities"])
  {
    __updatedCities = [[decoder decodeObjectForKey: @"updatedCities"] retain_stub];
    __updatedCities_isset = YES;
  }
  if ([decoder containsValueForKey: @"updatedSchedule"])
  {
    __updatedSchedule = [[decoder decodeObjectForKey: @"updatedSchedule"] retain_stub];
    __updatedSchedule_isset = YES;
  }
  if ([decoder containsValueForKey: @"updatedNews"])
  {
    __updatedNews = [[decoder decodeObjectForKey: @"updatedNews"] retain_stub];
    __updatedNews_isset = YES;
  }
  if ([decoder containsValueForKey: @"deletedCityIds"])
  {
    __deletedCityIds = [[decoder decodeObjectForKey: @"deletedCityIds"] retain_stub];
    __deletedCityIds_isset = YES;
  }
  if ([decoder containsValueForKey: @"deletedScheduleIds"])
  {
    __deletedScheduleIds = [[decoder decodeObjectForKey: @"deletedScheduleIds"] retain_stub];
    __deletedScheduleIds_isset = YES;
  }
  if ([decoder containsValueForKey: @"deletedNewsIds"])
  {
    __deletedNewsIds = [[decoder decodeObjectForKey: @"deletedNewsIds"] retain_stub];
    __deletedNewsIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__updatedCities_isset)
  {
    [encoder encodeObject: __updatedCities forKey: @"updatedCities"];
  }
  if (__updatedSchedule_isset)
  {
    [encoder encodeObject: __updatedSchedule forKey: @"updatedSchedule"];
  }
  if (__updatedNews_isset)
  {
    [encoder encodeObject: __updatedNews forKey: @"updatedNews"];
  }
  if (__deletedCityIds_isset)
  {
    [encoder encodeObject: __deletedCityIds forKey: @"deletedCityIds"];
  }
  if (__deletedScheduleIds_isset)
  {
    [encoder encodeObject: __deletedScheduleIds forKey: @"deletedScheduleIds"];
  }
  if (__deletedNewsIds_isset)
  {
    [encoder encodeObject: __deletedNewsIds forKey: @"deletedNewsIds"];
  }
}

- (void) dealloc
{
  [__updatedCities release_stub];
  [__updatedSchedule release_stub];
  [__updatedNews release_stub];
  [__deletedCityIds release_stub];
  [__deletedScheduleIds release_stub];
  [__deletedNewsIds release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) updatedCities {
  return [[__updatedCities retain_stub] autorelease_stub];
}

- (void) setUpdatedCities: (NSMutableArray *) updatedCities {
  [updatedCities retain_stub];
  [__updatedCities release_stub];
  __updatedCities = updatedCities;
  __updatedCities_isset = YES;
}

- (BOOL) updatedCitiesIsSet {
  return __updatedCities_isset;
}

- (void) unsetUpdatedCities {
  [__updatedCities release_stub];
  __updatedCities = nil;
  __updatedCities_isset = NO;
}

- (NSMutableArray *) updatedSchedule {
  return [[__updatedSchedule retain_stub] autorelease_stub];
}

- (void) setUpdatedSchedule: (NSMutableArray *) updatedSchedule {
  [updatedSchedule retain_stub];
  [__updatedSchedule release_stub];
  __updatedSchedule = updatedSchedule;
  __updatedSchedule_isset = YES;
}

- (BOOL) updatedScheduleIsSet {
  return __updatedSchedule_isset;
}

- (void) unsetUpdatedSchedule {
  [__updatedSchedule release_stub];
  __updatedSchedule = nil;
  __updatedSchedule_isset = NO;
}

- (NSMutableArray *) updatedNews {
  return [[__updatedNews retain_stub] autorelease_stub];
}

- (void) setUpdatedNews: (NSMutableArray *) updatedNews {
  [updatedNews retain_stub];
  [__updatedNews release_stub];
  __updatedNews = updatedNews;
  __updatedNews_isset = YES;
}

- (BOOL) updatedNewsIsSet {
  return __updatedNews_isset;
}

- (void) unsetUpdatedNews {
  [__updatedNews release_stub];
  __updatedNews = nil;
  __updatedNews_isset = NO;
}

- (NSMutableArray *) deletedCityIds {
  return [[__deletedCityIds retain_stub] autorelease_stub];
}

- (void) setDeletedCityIds: (NSMutableArray *) deletedCityIds {
  [deletedCityIds retain_stub];
  [__deletedCityIds release_stub];
  __deletedCityIds = deletedCityIds;
  __deletedCityIds_isset = YES;
}

- (BOOL) deletedCityIdsIsSet {
  return __deletedCityIds_isset;
}

- (void) unsetDeletedCityIds {
  [__deletedCityIds release_stub];
  __deletedCityIds = nil;
  __deletedCityIds_isset = NO;
}

- (NSMutableArray *) deletedScheduleIds {
  return [[__deletedScheduleIds retain_stub] autorelease_stub];
}

- (void) setDeletedScheduleIds: (NSMutableArray *) deletedScheduleIds {
  [deletedScheduleIds retain_stub];
  [__deletedScheduleIds release_stub];
  __deletedScheduleIds = deletedScheduleIds;
  __deletedScheduleIds_isset = YES;
}

- (BOOL) deletedScheduleIdsIsSet {
  return __deletedScheduleIds_isset;
}

- (void) unsetDeletedScheduleIds {
  [__deletedScheduleIds release_stub];
  __deletedScheduleIds = nil;
  __deletedScheduleIds_isset = NO;
}

- (NSMutableArray *) deletedNewsIds {
  return [[__deletedNewsIds retain_stub] autorelease_stub];
}

- (void) setDeletedNewsIds: (NSMutableArray *) deletedNewsIds {
  [deletedNewsIds retain_stub];
  [__deletedNewsIds release_stub];
  __deletedNewsIds = deletedNewsIds;
  __deletedNewsIds_isset = YES;
}

- (BOOL) deletedNewsIdsIsSet {
  return __deletedNewsIds_isset;
}

- (void) unsetDeletedNewsIds {
  [__deletedNewsIds release_stub];
  __deletedNewsIds = nil;
  __deletedNewsIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NamazThriftThriftCity *_elem2 = [[NamazThriftThriftCity alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setUpdatedCities: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            NamazThriftThriftSchedule *_elem5 = [[NamazThriftThriftSchedule alloc] init];
            [_elem5 read: inProtocol];
            [fieldValue addObject: _elem5];
            [_elem5 release_stub];
          }
          [inProtocol readListEnd];
          [self setUpdatedSchedule: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            NamazThriftThriftNews *_elem8 = [[NamazThriftThriftNews alloc] init];
            [_elem8 read: inProtocol];
            [fieldValue addObject: _elem8];
            [_elem8 release_stub];
          }
          [inProtocol readListEnd];
          [self setUpdatedNews: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size9;
          [inProtocol readListBeginReturningElementType: NULL size: &_size9];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size9];
          int _i10;
          for (_i10 = 0; _i10 < _size9; ++_i10)
          {
            int64_t _elem11 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem11]];
          }
          [inProtocol readListEnd];
          [self setDeletedCityIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size12;
          [inProtocol readListBeginReturningElementType: NULL size: &_size12];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size12];
          int _i13;
          for (_i13 = 0; _i13 < _size12; ++_i13)
          {
            int64_t _elem14 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem14]];
          }
          [inProtocol readListEnd];
          [self setDeletedScheduleIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            int64_t _elem17 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem17]];
          }
          [inProtocol readListEnd];
          [self setDeletedNewsIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftChangesResponse"];
  if (__updatedCities_isset) {
    if (__updatedCities != nil) {
      [outProtocol writeFieldBeginWithName: @"updatedCities" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__updatedCities count]];
        int i19;
        for (i19 = 0; i19 < [__updatedCities count]; i19++)
        {
          [[__updatedCities objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__updatedSchedule_isset) {
    if (__updatedSchedule != nil) {
      [outProtocol writeFieldBeginWithName: @"updatedSchedule" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__updatedSchedule count]];
        int i21;
        for (i21 = 0; i21 < [__updatedSchedule count]; i21++)
        {
          [[__updatedSchedule objectAtIndex: i21] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__updatedNews_isset) {
    if (__updatedNews != nil) {
      [outProtocol writeFieldBeginWithName: @"updatedNews" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__updatedNews count]];
        int i23;
        for (i23 = 0; i23 < [__updatedNews count]; i23++)
        {
          [[__updatedNews objectAtIndex: i23] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__deletedCityIds_isset) {
    if (__deletedCityIds != nil) {
      [outProtocol writeFieldBeginWithName: @"deletedCityIds" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__deletedCityIds count]];
        int i25;
        for (i25 = 0; i25 < [__deletedCityIds count]; i25++)
        {
          [outProtocol writeI64: [[__deletedCityIds objectAtIndex: i25] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__deletedScheduleIds_isset) {
    if (__deletedScheduleIds != nil) {
      [outProtocol writeFieldBeginWithName: @"deletedScheduleIds" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__deletedScheduleIds count]];
        int i27;
        for (i27 = 0; i27 < [__deletedScheduleIds count]; i27++)
        {
          [outProtocol writeI64: [[__deletedScheduleIds objectAtIndex: i27] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__deletedNewsIds_isset) {
    if (__deletedNewsIds != nil) {
      [outProtocol writeFieldBeginWithName: @"deletedNewsIds" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__deletedNewsIds count]];
        int i29;
        for (i29 = 0; i29 < [__deletedNewsIds count]; i29++)
        {
          [outProtocol writeI64: [[__deletedNewsIds objectAtIndex: i29] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftChangesResponse("];
  [ms appendString: @"updatedCities:"];
  [ms appendFormat: @"%@", __updatedCities];
  [ms appendString: @",updatedSchedule:"];
  [ms appendFormat: @"%@", __updatedSchedule];
  [ms appendString: @",updatedNews:"];
  [ms appendFormat: @"%@", __updatedNews];
  [ms appendString: @",deletedCityIds:"];
  [ms appendFormat: @"%@", __deletedCityIds];
  [ms appendString: @",deletedScheduleIds:"];
  [ms appendFormat: @"%@", __deletedScheduleIds];
  [ms appendString: @",deletedNewsIds:"];
  [ms appendFormat: @"%@", __deletedNewsIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation NamazThriftNamazConstants
+ (void) initialize {
}
@end

@interface NamazThriftping_args : NSObject <TBase, NSCoding> {
  NamazThriftThriftRequestBase * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) NamazThriftThriftRequestBase * request;
#endif

- (id) init;
- (id) initWithRequest: (NamazThriftThriftRequestBase *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NamazThriftThriftRequestBase *) request;
- (void) setRequest: (NamazThriftThriftRequestBase *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation NamazThriftping_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (NamazThriftThriftRequestBase *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (NamazThriftThriftRequestBase *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (NamazThriftThriftRequestBase *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NamazThriftThriftRequestBase *fieldValue = [[NamazThriftThriftRequestBase alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ping_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NamazThriftPing_result : NSObject <TBase, NSCoding> {
  NamazThriftThriftPingResponse * __success;
  NamazThriftThriftException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NamazThriftThriftPingResponse * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) NamazThriftThriftException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NamazThriftThriftPingResponse *) success ex: (NamazThriftThriftException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NamazThriftThriftPingResponse *) success;
- (void) setSuccess: (NamazThriftThriftPingResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (NamazThriftThriftException *) ex;
- (void) setEx: (NamazThriftThriftException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation NamazThriftPing_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NamazThriftThriftPingResponse *) success ex: (NamazThriftThriftException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NamazThriftThriftPingResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NamazThriftThriftPingResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (NamazThriftThriftException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (NamazThriftThriftException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NamazThriftThriftPingResponse *fieldValue = [[NamazThriftThriftPingResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          NamazThriftThriftException *fieldValue = [[NamazThriftThriftException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Ping_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Ping_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NamazThriftgetChanged_args : NSObject <TBase, NSCoding> {
  NamazThriftThriftChangesRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) NamazThriftThriftChangesRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (NamazThriftThriftChangesRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NamazThriftThriftChangesRequest *) request;
- (void) setRequest: (NamazThriftThriftChangesRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation NamazThriftgetChanged_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (NamazThriftThriftChangesRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (NamazThriftThriftChangesRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (NamazThriftThriftChangesRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NamazThriftThriftChangesRequest *fieldValue = [[NamazThriftThriftChangesRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getChanged_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getChanged_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NamazThriftGetChanged_result : NSObject <TBase, NSCoding> {
  NamazThriftThriftChangesResponse * __success;
  NamazThriftThriftException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NamazThriftThriftChangesResponse * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) NamazThriftThriftException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NamazThriftThriftChangesResponse *) success ex: (NamazThriftThriftException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NamazThriftThriftChangesResponse *) success;
- (void) setSuccess: (NamazThriftThriftChangesResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (NamazThriftThriftException *) ex;
- (void) setEx: (NamazThriftThriftException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation NamazThriftGetChanged_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NamazThriftThriftChangesResponse *) success ex: (NamazThriftThriftException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NamazThriftThriftChangesResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NamazThriftThriftChangesResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (NamazThriftThriftException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (NamazThriftThriftException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NamazThriftThriftChangesResponse *fieldValue = [[NamazThriftThriftChangesResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          NamazThriftThriftException *fieldValue = [[NamazThriftThriftException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetChanged_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetChanged_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NamazThriftThriftNamazServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_ping: (NamazThriftThriftRequestBase *) request
{
  [outProtocol writeMessageBeginWithName: @"ping" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NamazThriftThriftPingResponse *) recv_ping
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  NamazThriftPing_result * result = [[[NamazThriftPing_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"ping failed: unknown result"];
}

- (NamazThriftThriftPingResponse *) ping: (NamazThriftThriftRequestBase *) request
{
  [self send_ping : request];
  return [self recv_ping];
}

- (void) send_getChanged: (NamazThriftThriftChangesRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getChanged" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getChanged_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NamazThriftThriftChangesResponse *) recv_getChanged
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  NamazThriftGetChanged_result * result = [[[NamazThriftGetChanged_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getChanged failed: unknown result"];
}

- (NamazThriftThriftChangesResponse *) getChanged: (NamazThriftThriftChangesRequest *) request
{
  [self send_getChanged : request];
  return [self recv_getChanged];
}

@end

@implementation NamazThriftThriftNamazServiceProcessor

- (id) initWithThriftNamazService: (id <NamazThriftThriftNamazService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_ping_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"ping"];
  }
  {
    SEL s = @selector(process_getChanged_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getChanged"];
  }
  return self;
}

- (id<NamazThriftThriftNamazService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_ping_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  NamazThriftping_args * args = [[NamazThriftping_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  NamazThriftPing_result * result = [[NamazThriftPing_result alloc] init];
  [result setSuccess: [mService ping: [args request]]];
  [outProtocol writeMessageBeginWithName: @"ping"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getChanged_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  NamazThriftgetChanged_args * args = [[NamazThriftgetChanged_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  NamazThriftGetChanged_result * result = [[NamazThriftGetChanged_result alloc] init];
  [result setSuccess: [mService getChanged: [args request]]];
  [outProtocol writeMessageBeginWithName: @"getChanged"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

